// The format of this file is pairs of lines (// lines are comments)
// [unit] input
// expected toStringTree
// where [unit] is one of expression or PROGRAM (default: PROGRAM)
expression [1,2,3]
(ARRAY L1:1 [(LITERAL L1:1 1), (LITERAL L3:1 2), (LITERAL L5:1 3)])

//PROGRAM
select [{a : 1}] a, b from foobar;
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (SCAN L27:1 {alias=foobar} [foobar], []), [(FIELD (READ_FIELD L17:1 {a=1} foobar, a), a), (FIELD (READ_FIELD L20:1 foobar, b), b)]), result1), (OUTPUT L0:1 result1)])

select a, b from foobar order by [{fancy : true}] (a + b) + 1;
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (SORT (SCAN L17:1 {alias=foobar} [foobar], []), [(ASC L33:1 (ADD {fancy=true} (ADD (READ_FIELD L51:1 foobar, a), (READ_FIELD L55:1 foobar, b)), (LITERAL L60:1 1)))]), [(FIELD (READ_FIELD L7:1 foobar, a), a), (FIELD (READ_FIELD L10:1 foobar, b), b)]), result1), (OUTPUT L0:1 result1)])

select a, b from foobar where c IN (1, 2, 3);
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (FILTER (SCAN L17:1 {alias=foobar} [foobar], []), (IN (READ_FIELD L30:1 foobar, c), (ARRAY L36:1 [(LITERAL L36:1 1), (LITERAL L39:1 2), (LITERAL L42:1 3)]))), [(FIELD (READ_FIELD L7:1 foobar, a), a), (FIELD (READ_FIELD L10:1 foobar, b), b)]), result1), (OUTPUT L0:1 result1)])

select a, b from foobar where a = ANY(1, 2, 3) OR c IN (1, 2, 3);
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (FILTER (SCAN L17:1 {alias=foobar} [foobar], []), (OR [(EQ (READ_FIELD L30:1 foobar, a), (CALL L34:1 [ANY], [(LITERAL L38:1 1), (LITERAL L41:1 2), (LITERAL L44:1 3)])), (IN (READ_FIELD L50:1 foobar, c), (ARRAY L56:1 [(LITERAL L56:1 1), (LITERAL L59:1 2), (LITERAL L62:1 3)]))])), [(FIELD (READ_FIELD L7:1 foobar, a), a), (FIELD (READ_FIELD L10:1 foobar, b), b)]), result1), (OUTPUT L0:1 result1)])

select a.b AS booger, b from foobar fancy where a = ANY(1, 2, 3) OR c IN (1, 2, 3);
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (FILTER (SCAN L29:1 {alias=fancy} [foobar], []), (OR [(EQ (READ_FIELD L48:1 fancy, a), (CALL L52:1 [ANY], [(LITERAL L56:1 1), (LITERAL L59:1 2), (LITERAL L62:1 3)])), (IN (READ_FIELD L68:1 fancy, c), (ARRAY L74:1 [(LITERAL L74:1 1), (LITERAL L77:1 2), (LITERAL L80:1 3)]))])), [(FIELD (PROPREF L7:1 (READ_FIELD L7:1 fancy, a), b), booger), (FIELD (READ_FIELD L22:1 fancy, b), b)]), result1), (OUTPUT L0:1 result1)])

SELECT a, b, c FROM source;
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (SCAN L20:1 {alias=source} [source], []), [(FIELD (READ_FIELD L7:1 source, a), a), (FIELD (READ_FIELD L10:1 source, b), b), (FIELD (READ_FIELD L13:1 source, c), c)]), result1), (OUTPUT L0:1 result1)])

SELECT a x, b, c FROM source;
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (SCAN L22:1 {alias=source} [source], []), [(FIELD (READ_FIELD L7:1 source, a), x), (FIELD (READ_FIELD L12:1 source, b), b), (FIELD (READ_FIELD L15:1 source, c), c)]), result1), (OUTPUT L0:1 result1)])

SELECT a.b.c[0] x, b, c FROM source;
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (SCAN L29:1 {alias=source} [source], []), [(FIELD (INDEX L7:1 (PROPREF L7:1 (PROPREF L7:1 (READ_FIELD L7:1 source, a), b), c), (LITERAL L13:1 0)), x), (FIELD (READ_FIELD L19:1 source, b), b), (FIELD (READ_FIELD L22:1 source, c), c)]), result1), (OUTPUT L0:1 result1)])

SELECT * FROM source WHERE a AND b AND c AND d OR x;
(PROGRAM L0:0 [(EXECUTE L0:1 (FILTER (SCAN L14:1 {alias=source} [source], []), (OR [(AND [(READ_FIELD L27:1 source, a), (READ_FIELD L33:1 source, b), (READ_FIELD L39:1 source, c), (READ_FIELD L45:1 source, d)]), (READ_FIELD L50:1 source, x)])), result1), (OUTPUT L0:1 result1)])

SELECT * FROM ns.source WHERE a AND b AND c AND d OR x;
(PROGRAM L0:0 [(EXECUTE L0:1 (FILTER (SCAN L14:1 {alias=source} [ns, source], []), (OR [(AND [(READ_FIELD L30:1 source, a), (READ_FIELD L36:1 source, b), (READ_FIELD L42:1 source, c), (READ_FIELD L48:1 source, d)]), (READ_FIELD L53:1 source, x)])), result1), (OUTPUT L0:1 result1)])

SELECT a, b, c FROM source paged 10;
(PROGRAM L0:0 [(EXECUTE L0:1 (PAGE (PROJECT (SCAN L20:1 {alias=source} [source], []), [(FIELD (READ_FIELD L7:1 source, a), a), (FIELD (READ_FIELD L10:1 source, b), b), (FIELD (READ_FIELD L13:1 source, c), c)]), (LITERAL L33:1 10)), result1), (OUTPUT L0:1 result1)])

next 'key' output as foo;
(PROGRAM L0:0 [(EXECUTE L0:1 (NEXT L0:1 key), foo), (OUTPUT L0:1 foo)])

SELECT * FROM source | step1 | step2() | step3(1, 2) OUTPUT AS booger;
(PROGRAM L0:0 [(EXECUTE L0:1 (PIPE (PIPE (PIPE (SCAN L14:1 {alias=source} [source], []), [step1], []), [step2], []), [step3], [(LITERAL L47:1 1), (LITERAL L50:1 2)]), booger), (OUTPUT L0:1 booger)])

IMPORT 'foo' AS foo;
(PROGRAM L0:0 [])

IMPORT foo AS foo;
(PROGRAM L0:0 [])

IMPORT foo;
(PROGRAM L0:0 [])

FROM foo IMPORT bar;
(PROGRAM L0:0 [])

FROM 'foo' IMPORT bar, baz;
(PROGRAM L0:0 [])

CREATE TEMP TABLE foo AS (SELECT * FROM bar);
(PROGRAM L0:0 [(EXECUTE L18:1 (SCAN L40:1 {alias=bar} [bar], []), foo)])

CREATE TEMPORARY TABLE foo AS (SELECT * FROM bar);
(PROGRAM L0:0 [(EXECUTE L23:1 (SCAN L45:1 {alias=bar} [bar], []), foo)])

SELECT * FROM source WHERE id IN (@foo);
(PROGRAM L0:0 [(EXECUTE L0:1 (FILTER (SCAN L14:1 {alias=source} [source], []), (IN (READ_FIELD L27:1 source, id), (ARRAY L34:1 [(VARREF L35:1 foo)]))), result1), (OUTPUT L0:1 result1)])

PROGRAM (@foo array<string>); SELECT * FROM source WHERE id IN (@foo);
(PROGRAM L0:0 [(ARGUMENT foo, (ARRAY L14:1 (STRING L20:1)), (NULL)), (EXECUTE L30:1 (FILTER (SCAN L44:1 {alias=source} [source], []), (IN (READ_FIELD L57:1 source, id), (VARREF L65:1 foo))), result1), (OUTPUT L30:1 result1)])

SELECT zot.foo() FROM bar;
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (SCAN L22:1 {alias=bar} [bar], []), [(FIELD (CALL L7:1 [zot, foo], []), expr)]), result1), (OUTPUT L0:1 result1)])

SELECT zot.foo FROM bar;
(PROGRAM L0:0 [(EXECUTE L0:1 (PROJECT (SCAN L20:1 {alias=bar} [bar], []), [(FIELD (PROPREF L7:1 (READ_FIELD L7:1 bar, zot), foo), foo)]), result1), (OUTPUT L0:1 result1)])

SELECT * FROM SOURCES *;
(PROGRAM L0:0 [(EXECUTE L0:1 (ALL L22:1 {alias=row}), result1), (OUTPUT L0:1 result1)])

SELECT * FROM SOURCES a, b, c.d;
(PROGRAM L0:0 [(EXECUTE L0:1 (MULTISOURCE L22:1 {alias=row} [[a], [b], [c, d]]), result1), (OUTPUT L0:1 result1)])

SELECT * FROM SOURCES * WHERE a = b;
(PROGRAM L0:0 [(EXECUTE L0:1 (FILTER (ALL L22:1 {alias=row}), (EQ (READ_FIELD L30:1 row, a), (READ_FIELD L34:1 row, b))), result1), (OUTPUT L0:1 result1)])

SELECT * FROM SOURCES a, b, c.d WHERE a = c;
(PROGRAM L0:0 [(EXECUTE L0:1 (FILTER (MULTISOURCE L22:1 {alias=row} [[a], [b], [c, d]]), (EQ (READ_FIELD L38:1 row, a), (READ_FIELD L42:1 row, c))), result1), (OUTPUT L0:1 result1)])
